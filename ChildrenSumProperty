//Children Sum Iterative
#include<bits/stdc++.h>
using namespace std;
void inorder(struct node * root);
bool checkChildrenSum(struct node *root);
struct node *ins(int x);
struct node 
{
    int data;
    struct node *left,*right;
};
void inorder(struct node * root)
{
    if(!root)
    return;
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
struct node *ins(int x)
{
    struct node *temp=(struct node *)malloc(sizeof(struct node));
    temp->data=x;
    temp->left=temp->right=NULL;
}
bool checkChildrenSum(struct node *root)
{
    queue<struct node *> q;
    q.push(root);
    bool f=true;
    while(!q.empty())
    {
        struct node *x=q.front();
        q.pop();
        if(x->left)
        {
            q.push(x->left);
            if(!(x->right))
            f=f & (x->left->data==x->data);
        }
        if(x->right)
        {
            q.push(x->right);
            if(!(x->left))
            f=f & (x->right->data==x->data);
            else
            {
                if(x->data-x->left->data == x->right->data)
                {
                    f=f & true;
                }
                else f=false;
            }
        }
    }
    return f;
}
int main()
{
    struct node *root=ins(10);
    root->left=ins(8);
    root->right=ins(2);
    root->left->left=ins(3);
    root->left->right=ins(5);
    root->right->left=ins(2);
    //inorder(root);
    bool b=checkChildrenSum(root);
    if(b)
    cout<<"Yes";
    else cout<<"No";
    return 0;
}
