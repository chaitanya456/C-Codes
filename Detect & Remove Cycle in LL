//Floyd Cycle Algo
#include<bits/stdc++.h>
using namespace std;
void disp(struct node * h);
struct node * ins(int x);
void detrem(struct node *head);
void rem(struct node *f,struct node *h);
struct node
{
  int data;
  struct node * next;
};
struct node * ins(int x)
{
    struct node *temp=(struct node *)malloc(sizeof(struct node));
    temp->data=x;
    temp->next=NULL;
    return temp;
}
void disp(struct node * h)
{
    while(h)
    {
        cout<<h->data<<"->";
        h=h->next;
    }
}
void detrem(struct node *head)
{
    struct node *f,*s;
    f=s=head;
    while(f && s && f->next)
    {
        f=f->next->next;
        s=s->next;
        if(f==s)
        {
            cout<<"Cycle Exist.. Please Wait...."<<endl;
            rem(f,head);
        }
    }
}
void rem(struct node *f,struct node *h)
{
    while( h && f)
    {
        if(h->next == f->next)
        {
            f->next=NULL;
            cout<<"Loop removed"<<endl;
        }
        h=h->next;
        f=f->next;
    }
}
int main()
{
    struct node* head=ins(1);
    head->next=ins(2);
    head->next->next=ins(3);
    head->next->next->next=ins(4);
    head->next->next->next->next=ins(5);
    //Creating cycle in LL
    head->next->next->next->next->next=head->next->next;
    detrem(head);
    disp(head);
    cout<<endl;
    
    return 0;
}
